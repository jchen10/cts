{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/exp.spec.ts"],"names":["description","makeTestGroup","GPUTest","ulpComparator","kBit","kValue","f32","f32Bits","TypeF32","biasedRange","allInputSources","run","builtin","g","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","n","x","Math","abs","makeCase","expected","exp","input","cases","negative","min","infinity","positive","max","map"],"mappings":"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","sourcesContent":["export const description = `\nExecution tests for the 'exp' builtin function\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n@const fn exp(e1: T ) -> T\nReturns the natural exponentiation of e1 (e.g. e^e1). Component-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { ulpComparator } from '../../../../../util/compare.js';\nimport { kBit, kValue } from '../../../../../util/constants.js';\nimport { f32, f32Bits, TypeF32 } from '../../../../../util/conversion.js';\nimport { biasedRange } from '../../../../../util/math.js';\nimport { allInputSources, Case, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const n = (x: number): number => {\n      return 3 + 2 * Math.abs(x);\n    };\n\n    const makeCase = (x: number): Case => {\n      const expected = f32(Math.exp(x));\n      return { input: f32(x), expected: ulpComparator(x, expected, n) };\n    };\n\n    // floor(ln(max f32 value)) = 88, so exp(88) will be within range of a f32, but exp(89) will not\n    const cases: Array<Case> = [\n      makeCase(0), // Returns 1 by definition\n      makeCase(-89), // Returns subnormal value\n      makeCase(kValue.f32.negative.min), // Closest to returning 0 as possible\n      { input: f32(89), expected: f32Bits(kBit.f32.infinity.positive) }, // Overflows\n      ...biasedRange(kValue.f32.negative.max, -88, 100).map(x => makeCase(x)),\n      ...biasedRange(kValue.f32.positive.min, 88, 100).map(x => makeCase(x)),\n    ];\n\n    run(t, builtin('exp'), [TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"file":"exp.spec.js"}