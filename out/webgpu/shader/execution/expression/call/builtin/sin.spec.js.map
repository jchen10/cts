{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/sin.spec.ts"],"names":["description","makeTestGroup","GPUTest","absMatch","TypeF32","linearRange","allInputSources","makeUnaryF32Case","run","builtin","g","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","makeCase","x","Math","sin","cases","PI","map","cfg","cmpFloats"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,CAPO,CASP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,QAAT,QAAyB,gCAAzB;AACA,SAASC,OAAT,QAAwB,mCAAxB;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,SAASC,eAAT,EAAwCC,gBAAxC,EAA0DC,GAA1D,QAAqE,qBAArE;;AAEA,SAASC,OAAT,QAAwB,cAAxB;;AAEA,OAAO,MAAMC,CAAC,GAAGT,aAAa,CAACC,OAAD,CAAvB;;AAEPQ,CAAC,CAACC,IAAF,CAAO,gBAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH,CAES,sBAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBV,eAAzB,EAA0CU,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CAJJ;;AAMGC,aANH;;AAQAR,CAAC,CAACC,IAAF,CAAO,KAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA,CAPA;;AASGC,MATH,CASU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBV,eAAzB,EAA0CU,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CAVJ;;AAYGE,EAZH,CAYM,OAAMC,CAAN,KAAW;AACb;AACA,QAAMC,QAAQ,GAAG,CAACC,CAAD,KAAqB;AACpC,WAAOf,gBAAgB,CAACe,CAAD,EAAIC,IAAI,CAACC,GAAT,CAAvB;AACD,GAFD;;AAIA;AACA,QAAMC,KAAK,GAAGpB,WAAW,CAAC,CAACkB,IAAI,CAACG,EAAP,EAAWH,IAAI,CAACG,EAAhB,EAAoB,IAApB,CAAX,CAAqCC,GAArC,CAAyC,CAAAL,CAAC,KAAID,QAAQ,CAACC,CAAD,CAAtD,CAAd;;AAEA,QAAMM,GAAW,GAAGR,CAAC,CAACN,MAAtB;AACAc,EAAAA,GAAG,CAACC,SAAJ,GAAgB1B,QAAQ,CAAC,KAAK,CAAC,EAAP,CAAxB;AACAK,EAAAA,GAAG,CAACY,CAAD,EAAIX,OAAO,CAAC,KAAD,CAAX,EAAoB,CAACL,OAAD,CAApB,EAA+BA,OAA/B,EAAwCwB,GAAxC,EAA6CH,KAA7C,CAAH;AACD,CAxBH;;AA0BAf,CAAC,CAACC,IAAF,CAAO,KAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH,CAES,WAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBV,eAAzB,EAA0CU,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CAJJ;;AAMGC,aANH","sourcesContent":["export const description = `\nExecution tests for the 'sin' builtin function\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n@const fn sin(e: T ) -> T\nReturns the sine of e. Component-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { absMatch } from '../../../../../util/compare.js';\nimport { TypeF32 } from '../../../../../util/conversion.js';\nimport { linearRange } from '../../../../../util/math.js';\nimport { allInputSources, Case, Config, makeUnaryF32Case, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nf32 tests\n\nTODO(#792): Decide what the ground-truth is for these tests. [1]\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    // [1]: Need to decide what the ground-truth is.\n    const makeCase = (x: number): Case => {\n      return makeUnaryF32Case(x, Math.sin);\n    };\n\n    // Spec defines accuracy on [-π, π]\n    const cases = linearRange(-Math.PI, Math.PI, 1000).map(x => makeCase(x));\n\n    const cfg: Config = t.params;\n    cfg.cmpFloats = absMatch(2 ** -11);\n    run(t, builtin('sin'), [TypeF32], TypeF32, cfg, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"file":"sin.spec.js"}