{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/clamp.spec.ts"],"names":["description","makeTestGroup","GPUTest","kBit","kValue","i32","i32Bits","TypeF32","TypeI32","TypeU32","u32","u32Bits","clampIntervals","allInputSources","makeTernaryF32IntervalCase","run","builtin","g","calculateMinMaxClamp","ei","fi","gi","Math","min","max","generateIntegerTestCases","test_values","cases","Array","forEach","e","f","expected_idx","expected","push","input","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","negative","positive","makeCase","x","y","z","values","Number","NEGATIVE_INFINITY","f32","subnormal","POSITIVE_INFINITY"],"mappings":"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","sourcesContent":["export const description = `\nExecution tests for the 'clamp' builtin function\n\nS is AbstractInt, i32, or u32\nT is S or vecN<S>\n@const fn clamp(e: T , low: T, high: T) -> T\nReturns min(max(e,low),high). Component-wise when T is a vector.\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n@const clamp(e: T , low: T , high: T) -> T\nReturns either min(max(e,low),high), or the median of the three values e, low, high.\nComponent-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { kBit, kValue } from '../../../../../util/constants.js';\nimport {\n  i32,\n  i32Bits,\n  Scalar,\n  TypeF32,\n  TypeI32,\n  TypeU32,\n  u32,\n  u32Bits,\n} from '../../../../../util/conversion.js';\nimport { clampIntervals } from '../../../../../util/f32_interval.js';\nimport { allInputSources, Case, makeTernaryF32IntervalCase, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n/**\n * Calculates clamp using the min-max formula.\n * clamp(e, f, g) = min(max(e, f), g)\n *\n * Operates on indices of an ascending sorted array, instead of the actual\n * values to avoid rounding issues.\n *\n * @returns the index of the clamped value\n */\nfunction calculateMinMaxClamp(ei: number, fi: number, gi: number): number {\n  return Math.min(Math.max(ei, fi), gi);\n}\n\n/** @returns a set of clamp test cases from an ascending list of integer values */\nfunction generateIntegerTestCases(test_values: Array<Scalar>): Array<Case> {\n  const cases = new Array<Case>();\n  test_values.forEach((e, ei) => {\n    test_values.forEach((f, fi) => {\n      test_values.forEach((g, gi) => {\n        const expected_idx = calculateMinMaxClamp(ei, fi, gi);\n        const expected = test_values[expected_idx];\n        cases.push({ input: [e, f, g], expected });\n      });\n    });\n  });\n  return cases;\n}\n\ng.test('abstract_int')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`abstract int tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('u32')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`u32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    // This array must be strictly increasing, since that ordering determines\n    // the expected values.\n    const test_values: Array<Scalar> = [\n      u32Bits(kBit.u32.min),\n      u32(1),\n      u32(2),\n      u32(0x70000000),\n      u32(0x80000000),\n      u32Bits(kBit.u32.max),\n    ];\n\n    run(\n      t,\n      builtin('clamp'),\n      [TypeU32, TypeU32, TypeU32],\n      TypeU32,\n      t.params,\n      generateIntegerTestCases(test_values)\n    );\n  });\n\ng.test('i32')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`i32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    // This array must be strictly increasing, since that ordering determines\n    // the expected values.\n    const test_values: Array<Scalar> = [\n      i32Bits(kBit.i32.negative.min),\n      i32(-2),\n      i32(-1),\n      i32(0),\n      i32(1),\n      i32(2),\n      i32Bits(0x70000000),\n      i32Bits(kBit.i32.positive.max),\n    ];\n\n    run(\n      t,\n      builtin('clamp'),\n      [TypeI32, TypeI32, TypeI32],\n      TypeI32,\n      t.params,\n      generateIntegerTestCases(test_values)\n    );\n  });\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const makeCase = (x: number, y: number, z: number): Case => {\n      return makeTernaryF32IntervalCase(x, y, z, ...clampIntervals);\n    };\n\n    const values: Array<number> = [\n      Number.NEGATIVE_INFINITY,\n      kValue.f32.negative.min,\n      -10.0,\n      -1.0,\n      kValue.f32.negative.max,\n      kValue.f32.subnormal.negative.min,\n      kValue.f32.subnormal.negative.max,\n      0.0,\n      kValue.f32.subnormal.positive.min,\n      kValue.f32.subnormal.positive.max,\n      kValue.f32.positive.min,\n      1.0,\n      10.0,\n      kValue.f32.positive.max,\n      Number.POSITIVE_INFINITY,\n    ];\n\n    const cases: Array<Case> = new Array<Case>();\n    values.forEach(x => {\n      values.forEach(y => {\n        values.forEach(z => {\n          cases.push(makeCase(x, y, z));\n        });\n      });\n    });\n\n    run(t, builtin('clamp'), [TypeF32, TypeF32, TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"file":"clamp.spec.js"}