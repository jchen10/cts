{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/floor.spec.ts"],"names":["description","makeTestGroup","GPUTest","TypeF32","floorInterval","fullF32Range","allInputSources","makeUnaryF32IntervalCase","run","builtin","g","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","makeCase","x","cases","map"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,CAPO,CASP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,OAAT,QAAwB,mCAAxB;AACA,SAASC,aAAT,QAA8B,qCAA9B;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,SAASC,eAAT,EAAgCC,wBAAhC,EAA0DC,GAA1D,QAAqE,qBAArE;;AAEA,SAASC,OAAT,QAAwB,cAAxB;;AAEA,OAAO,MAAMC,CAAC,GAAGT,aAAa,CAACC,OAAD,CAAvB;;AAEPQ,CAAC,CAACC,IAAF,CAAO,gBAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH,CAES,sBAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBV,eAAzB,EAA0CU,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CAJJ;;AAMGC,aANH;;AAQAR,CAAC,CAACC,IAAF,CAAO,KAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH,CAES,WAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBV,eAAzB,EAA0CU,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CAJJ;;AAMGE,EANH,CAMM,OAAMC,CAAN,KAAW;AACb,QAAMC,QAAQ,GAAG,CAACC,CAAD,KAAqB;AACpC,WAAOf,wBAAwB,CAACe,CAAD,EAAIlB,aAAJ,CAA/B;AACD,GAFD;;AAIA,QAAMmB,KAAkB,GAAG;AACzB;AACA,KAFyB;AAGzB,KAHyB;AAIzB,KAJyB;AAKzB,KALyB;AAMzB,KANyB;AAOzB;AACA,GAAC,GARwB;AASzB,GAAC,GATwB;AAUzB,GAAC,GAVwB;AAWzB,GAAC,GAXwB;AAYzB,GAAC,GAZwB;AAazB,KAAGlB,YAAY,EAbU;AAczBmB,EAAAA,GAdyB,CAcrB,CAAAF,CAAC,KAAID,QAAQ,CAACC,CAAD,CAdQ,CAA3B;;AAgBAd,EAAAA,GAAG,CAACY,CAAD,EAAIX,OAAO,CAAC,OAAD,CAAX,EAAsB,CAACN,OAAD,CAAtB,EAAiCA,OAAjC,EAA0CiB,CAAC,CAACN,MAA5C,EAAoDS,KAApD,CAAH;AACD,CA5BH;;AA8BAb,CAAC,CAACC,IAAF,CAAO,KAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH,CAES,WAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBV,eAAzB,EAA0CU,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CAJJ;;AAMGC,aANH","sourcesContent":["export const description = `\nExecution tests for the 'floor' builtin function\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n@const fn floor(e: T ) -> T\nReturns the floor of e. Component-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { TypeF32 } from '../../../../../util/conversion.js';\nimport { floorInterval } from '../../../../../util/f32_interval.js';\nimport { fullF32Range } from '../../../../../util/math.js';\nimport { allInputSources, Case, makeUnaryF32IntervalCase, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const makeCase = (x: number): Case => {\n      return makeUnaryF32IntervalCase(x, floorInterval);\n    };\n\n    const cases: Array<Case> = [\n      // Small positive numbers\n      0.1,\n      0.9,\n      1.0,\n      1.1,\n      1.9,\n      // Small negative numbers\n      -0.1,\n      -0.9,\n      -1.0,\n      -1.1,\n      -1.9,\n      ...fullF32Range(),\n    ].map(x => makeCase(x));\n\n    run(t, builtin('floor'), [TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"file":"floor.spec.js"}