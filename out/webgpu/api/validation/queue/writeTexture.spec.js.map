{"version":3,"sources":["../../../../../src/webgpu/api/validation/queue/writeTexture.spec.ts"],"names":["description","makeTestGroup","GPUConst","kResourceStates","ValidationTest","g","test","desc","params","u","combine","fn","t","textureState","texture","createTextureWithState","data","Uint8Array","size","isValid","expectValidationError","device","queue","writeTexture","paramsSubcasesOnly","usage","TextureUsage","COPY_DST","STORAGE_BINDING","COPY_SRC","createTexture","width","height","format","sampleCount","GPUTextureUsage","RENDER_ATTACHMENT"],"mappings":"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","sourcesContent":["export const description = `Tests writeTexture validation.`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUConst } from '../../../constants.js';\nimport { kResourceStates } from '../../../gpu_test.js';\nimport { ValidationTest } from '../validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('texture_state')\n  .desc(\n    `\n  Test that the texture used for GPUQueue.writeTexture() must be valid. Tests calling writeTexture\n  with {valid, invalid, destroyed} texture.\n  `\n  )\n  .params(u => u.combine('textureState', kResourceStates))\n  .fn(async t => {\n    const { textureState } = t.params;\n    const texture = t.createTextureWithState(textureState);\n    const data = new Uint8Array(16);\n    const size = [1, 1];\n\n    const isValid = textureState === 'valid';\n\n    t.expectValidationError(() => {\n      t.device.queue.writeTexture({ texture }, data, {}, size);\n    }, !isValid);\n  });\n\ng.test('usages')\n  .desc(\n    `\n  Tests calling writeTexture with the texture missed COPY_DST usage.\n    - texture {with, without} COPY DST usage\n  `\n  )\n  .paramsSubcasesOnly([\n    { usage: GPUConst.TextureUsage.COPY_DST }, // control case\n    { usage: GPUConst.TextureUsage.STORAGE_BINDING },\n    { usage: GPUConst.TextureUsage.STORAGE_BINDING | GPUConst.TextureUsage.COPY_SRC },\n    { usage: GPUConst.TextureUsage.STORAGE_BINDING | GPUConst.TextureUsage.COPY_DST },\n  ])\n  .fn(async t => {\n    const { usage } = t.params;\n    const texture = t.device.createTexture({\n      size: { width: 16, height: 16 },\n      usage,\n      format: 'rgba8unorm' as const,\n    });\n    const data = new Uint8Array(16);\n    const size = [1, 1];\n\n    const isValid = usage & GPUConst.TextureUsage.COPY_DST ? true : false;\n    t.expectValidationError(() => {\n      t.device.queue.writeTexture({ texture }, data, {}, size);\n    }, !isValid);\n  });\n\ng.test('sample_count')\n  .desc(\n    `\n  Test that the texture sample count. Check that a validation error is generated if sample count is\n  not 1.\n  `\n  )\n  .params(u => u.combine('sampleCount', [1, 4]))\n  .fn(async t => {\n    const { sampleCount } = t.params;\n    const texture = t.device.createTexture({\n      size: { width: 16, height: 16 },\n      sampleCount,\n      format: 'bgra8unorm',\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const data = new Uint8Array(16);\n    const size = [1, 1];\n\n    const isValid = sampleCount === 1;\n\n    t.expectValidationError(() => {\n      t.device.queue.writeTexture({ texture }, data, {}, size);\n    }, !isValid);\n  });\n"],"file":"writeTexture.spec.js"}